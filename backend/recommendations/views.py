from django.http import JsonResponse
from rest_framework.decorators import api_view
from .models import VideoRecommendation
from .youtube_api import get_video_recommendations
import time
from nltk.stem.snowball import FrenchStemmer

# D√©lai entre les requ√™tes (1 minute)
RESPONSE_DELAY = 10  
last_response_time = 0  # Stocker le dernier timestamp de la r√©ponse

# Fonction pour extraire les racines des mots (stemming)
def get_stemmed_words(text):
    stemmer = FrenchStemmer()
    words = text.lower().split()  # D√©coupage en mots
    return {stemmer.stem(word) for word in words}  # Appliquer le stemming et retourner un ensemble unique

@api_view(["GET"])
def video_recommendations(request):
    global last_response_time
    query = request.GET.get("query", "").strip()
    
    if not query:  # V√©rifier si la requ√™te est vide
        print("‚ö†Ô∏è Requ√™te sans mot-cl√©.")
        return JsonResponse({"message": "Veuillez fournir un mot-cl√© pour la recherche."}, status=400)
    
    print(f"üîé Requ√™te re√ßue avec les mots-cl√©s : {query}")

    current_time = time.time()
    time_since_last_request = current_time - last_response_time

    # V√©rifier si une nouvelle requ√™te peut √™tre envoy√©e
    if time_since_last_request < RESPONSE_DELAY:
        remaining_time = RESPONSE_DELAY - time_since_last_request
        print(f"‚è≥ Trop t√¥t pour une nouvelle requ√™te. Attendez encore {remaining_time:.1f} secondes.")
        return JsonResponse(
            {"message": f"Veuillez attendre encore {int(remaining_time)} secondes avant de refaire une requ√™te."},
            status=429
        )

    try:
        # R√©cup√©rer les vid√©os via l‚ÄôAPI YouTube
        videos = get_video_recommendations(query)
        print(f"üì∫ {len(videos)} vid√©os r√©cup√©r√©es depuis l'API YouTube.")

        if not videos:
            print("‚ùå Aucune vid√©o trouv√©e dans l'API YouTube.")
            return JsonResponse({"message": "Aucune vid√©o trouv√©e.", "videos": []}, status=200)

        # Sauvegarde des vid√©os en base de donn√©es
        for video in videos:
            obj, created = VideoRecommendation.objects.get_or_create(
                url=video["url"],
                defaults={
                    "title": video["title"],
                    "thumbnail": video["thumbnail"],
                    "description": video.get("description", "")
                }
            )
            if created:
                print(f"‚úÖ Vid√©o sauvegard√©e : {video['title']} ({video['url']})")
            else:
                print(f"üîÅ Vid√©o d√©j√† existante : {video['title']} ({video['url']})")

    except Exception as e:
        print(f"‚ùå Erreur API YouTube: {str(e)}")
        return JsonResponse({"message": f"Erreur lors de la r√©cup√©ration des vid√©os : {str(e)}"}, status=500)

    # R√©cup√©rer toutes les vid√©os de la base de donn√©es et les trier selon la similarit√© avec CHAQUE mot de la requ√™te
    query_words = query.lower().split()  # S√©parer chaque mot de la requ√™te
    all_videos = VideoRecommendation.objects.all()
    print(f"üìä Nombre total de vid√©os en base : {all_videos.count()}")

    video_scores = []
    for video in all_videos:
        title_words = video.title.lower().split()  # S√©parer les mots du titre
        score = sum(1 for word in query_words if word in title_words)  # Compter les mots communs
        print(f"üîç Score {score} pour la vid√©o : {video.title}")  # Debugging
        video_scores.append((score, video))

    # Trier les vid√©os par pertinence (score d√©croissant)
    filtered_videos = sorted([v for v in video_scores if v[0] > 0], key=lambda x: x[0], reverse=True)

    # Si aucune vid√©o ne correspond, envoyer les 22 premi√®res en fallback
    if not filtered_videos:
        print("‚ö†Ô∏è Aucun match exact, envoi des 5 premi√®res vid√©os.")
        filtered_videos = sorted(video_scores, key=lambda x: x[0], reverse=True)[:22]

    response_videos = [
        {
            "id": video.id,
            "title": video.title,
            "url": video.url,
            "thumbnail": video.thumbnail,
            "description": video.description
        }
        for _, video in filtered_videos
    ]

    print(f"üöÄ {len(response_videos)} vid√©os envoy√©es au frontend.")

    # Mettre √† jour le dernier temps de r√©ponse
    last_response_time = current_time

    return JsonResponse({"videos": response_videos}, status=200)
